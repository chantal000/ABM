ports-own [
  yearly_per_unit_price_CO2_storage
  
  planned_storage_location
  location_number
  location_who       ; who of the last storage that was built
  
  pipeline_building_costs
  
  recovery_period 
  
]
 

 
 

to do_port_actions

  
  ; once the last storage has reached the desired capacity, we can open a new storage location
  if ([full_enough?] of storage location_who) [
        
   
    ask storage location_who [
       
      
      ; ask all the links that are connected to the filled storage to change color to green
      ask my-in-links [set color green] 
    
      ; we then need to adjust the co2 values for the specific companies: 
      ; the building time of the pipeline will be done in the next year / tick
      ; so we start storing from the next tick after the pipeline got filled
      ask in-link-neighbors [   ; the in-link-neighbors are all the companies that joined that pipeline
        set tons_co2_emitted_this_company (tons_co2_emitted_this_company - optimal_capacity)
        set tons_co2_stored_this_company (tons_co2_stored_this_company + optimal_capacity)
      ]
      
      ;RECEIVE THE SUBSIDY FOR THE PIPELINE
      set total_system_subsidy_to_pipelines (total_system_subsidy_to_pipelines + total_subsidy_port)
      
      set built? true
      
      if fixed? [
        set open_to_join? false
        set color red 
      ]
    
    ]
    
    
     announce_new_storage_location
  ] 

end














to announce_new_storage_location
  
  ; increase the counter for next time
  set location_number (location_number + 1)
  
 ; once we reached the location at index 12, we run out of new locations, so we stop running the function
  if (location_number > 12) [ stop ]
  
  ; takes the whole row of the file
  set planned_storage_location item (location_number) data_list_locations
   
  
  ; potential new location (not yet built)
  hatch-storages 1 [
    show-turtle 
    setxy max-pxcor - 1 random-ycor
    set size 2
    set color grey  ; grey means the location is not yet built
    
    set location_name item 0 [planned_storage_location] of myself
    type "new location for storage: " type location_name type "\n"
    
    ; new storage, so not built yet or full and companies can join the new pipeline
    set built? false
    set full_enough? false
    set completely_full? false
    set open_to_join? true
     
    ;pipeline capacity in tons of co2 (not mega tons!)
    set full_pipeline_capacity ((item 3 [planned_storage_location] of myself) * 1000000)
;    show full_pipeline_capacity
    
    set pipeline_capacity_left_to_fill (full_pipeline_capacity)
;   show pipeline_capacity_left_to_fill
    
    ; set the pipeline to be fixed or extensible
    set fixed? decide_if_fixed?
    ;  show "fixed?"
    ifelse fixed? [show "fixed pipeline"] [show "extensible pipeline"]
    
  ]
  
  ; who of the new storage
  set location_who (max [who] of storages) 
  
  
  ; costs = onshore km * costs per onshore km + offshore km * costs per offshore km
  ; costs are in euros (not million euros!!)
  ; these are the costs the port will need to pay
  set pipeline_building_costs (    (item 1 planned_storage_location) * ((item 4 planned_storage_location) * 1000000) +
                                   (item 2 planned_storage_location) * ((item 5 planned_storage_location) * 1000000))
;  show "pipeline building costs in euros"
;  show pipeline_building_costs
  
  
  ; set the price that companies need to pay to store 1 t of co2
  decide_co2_storage_price
  
end


 
 

 



;price should recover investment of payback period of 15 years
to decide_co2_storage_price
  
  ; we assume here the worst case scenario: only one company will join and pay the connection costs
  let total_cost_to_recover (pipeline_building_costs - connection_costs - total_subsidy_port * 1000000)
;  show "total cost to recover in euros"
;  show total_cost_to_recover
  
  ; divide over the 15 years recovery period
  let costs_to_recover_per_year (total_cost_to_recover / recovery_period )
;  show "costs to recover per year in euros"
;  show costs_to_recover_per_year
  
  ; we assume a conservative port: they set the break-even point when exactly the minimum capacity is reached
  ; everythings else will be profit
  let minimial_capacity_to_be_used ([full_pipeline_capacity] of storage location_who * percentage_of_pipeline_filled_needed_to_start_building / 100)
;  show "minimal capacity to be used in tons"
;  show minimial_capacity_to_be_used
  
  set yearly_per_unit_price_CO2_storage (costs_to_recover_per_year / minimial_capacity_to_be_used)
  type "(port): yearly price per unit co2 in euros:  " type yearly_per_unit_price_CO2_storage  type "\n"
  
  
  ; set the price to store one ton of co2 inside the capture technology
  ask storage location_who [
    set cost_for_companies_per_t_co2 ([yearly_per_unit_price_CO2_storage] of myself)
  ]
    
    
end


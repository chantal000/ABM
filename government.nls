governments-own [
  
]


to do_government_actions
  ; decide on subsidy split for that year
    let new_fraction_subsidy_pipeline (decide_percentage_subsidy_for_pipelines)
    
    give_subsidy_to_port
    give_subsidy_to_companies
    
    increase_co2_fine
end



; for now it is just a fixed variable (set in a slider), but this can be changed later
to-report decide_percentage_subsidy_for_pipelines
;  show "fraction subsidy for pipeline"
;  show fraction_subsidy_for_pipeline
  report fraction_subsidy_for_pipeline
end




; amount of money available for the port to build pipelines
to give_subsidy_to_port
  set total_subsidy_port (yearly_budget_in_millions * fraction_subsidy_for_pipeline)
;  show "total subsidy port in million euros" 
;  show total_subsidy_port
end


; we can give the same price for every company or not
; for now: all money available for companies will be split equally over the companies, 
; then the companies can decide to use it or not (if not the money will just be unused)

to give_subsidy_to_companies
  ifelse (total_system_co2_emitted_to_air > 0) [
    set total_subsidy_companies_per_ton_co2 (((yearly_budget_in_millions * (1 - fraction_subsidy_for_pipeline) ) / total_system_co2_emitted_to_air) * 1000000)
    ;  show "total subsidy per ton co2 in euros" 
    ;  show total_subsidy_companies_per_ton_co2
  ]
  [
    set total_subsidy_companies_per_ton_co2 0
  ]
    
end


; sets the new co2 price based on some list of values (right now i just made up some list)
to increase_co2_fine
  set current_co2_fine item 1 item (ticks + 2) data_list_co2_fines
  
  ; keep track of co2 fine history
  set history_co2_fine lput current_co2_fine history_co2_fine
 
  
;  show "current co2 fine in euro per ton"
;  show current_co2_fine
end



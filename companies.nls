companies-own [
  payback_period
  
  
  total_yearly_price_CO2_storage
  total_yearly_price_CO2_emitted
  
  total_yearly_price_electricity
  total_yearly_CO2_fine
  
  
  oil_needed
  
  tons_co2_produced_this_company
  tons_co2_stored_this_company
  tons_co2_emitted_this_company
  
  optimal_capacity
  
  
  
]






to do_company_actions
 
  ; will be saved in optimal_capacity
  decide_how_much_capacity_capture_to_build
  
;  ifelse join_pipeline? [
;    ; do stuff when the company decides to join (we have to create a link with the storage location)
;    ; only join when we it economcally makes sense
;    ; add costs to industry costs for joining ccs
;    ; add amount of used subsidy to the total subsidy used by companies
;  ]
;  [
;    ; do stuff when the company does not join
;    ; increase tons_co2_stored_this_company by the amount that the new technology can store
;  ]
;  
  
  ; stuff to do if we decided to build a new capture technology
  ; we dont need to do anything if we dont decide to build something
  if (optimal_capacity > 0) [
    
    ; then we need to adjust the values for this company of how much co2 they store and emit
    set tons_co2_emitted_this_company (tons_co2_emitted_this_company - optimal_capacity)
    set tons_co2_stored_this_company (tons_co2_stored_this_company + optimal_capacity)
    
    let current_storage (one-of storages with-max [who])
    
    ; create a link from this company to the storage location
    create-pipeline-to current_storage
    
    
     
    
    ask one-of ports [
      set pipeline_capacity_left_to_fill (pipeline_capacity_left_to_fill - [optimal_capacity] of myself)
     
      ; once the storage has reached the desired capacity, we can open a new storage location
      if (pipeline_full?) [
        
        ; ask all the links that are connected to the filled storage to change color to green
        ask storage location_who [ask my-in-links[ set color green] ]
        
        announce_new_storage_location
         
      ] 
    ]
    
;    ask one-of ports [
;      build_pipeline [optimal_capacity]
;    ]
    
    
    
  
    
    
    
    
  ]
  
  
    
  
  
end



;need to implement some intelligence/decision alg, for now random decision
; needs to be decided based on capex, opex with or without capture, internal ROI
to decide_how_much_capacity_capture_to_build
  let available_capacity ([pipeline_capacity_left_to_fill] of one-of ports)
  let opex_storage_costs ([yearly_per_unit_price_CO2_storage] of one-of ports)
  let capex 0
  let opex 0
  let subsidy 0
  let yearly_saved_fines 0
  let profit 0
  set optimal_capacity 0
  
 
  
  let opex_pipeline 0
  ; what happens if its a fixed pipeline
  ifelse [fixed?] of one-of ports 
  [set opex_pipeline (opex_pipeline_fixed)]
  [set opex_pipeline (opex_pipeline_fixed)]
  
  
  ; we need to calculate the maximum capture capacity that this company could consider this time
  ; this is limited either by the maximum storage capacity available that this company could build,
  ; the capacity left to fill in the pipeline or the tons of co2 that this company still emits
  ; we pick the highest capacity here (numbers to be compared are in t) --> convert to Mt
  let temp_max_capture_capacity ((min(list available_capacity   tons_co2_emitted_this_company   max_capacity_capture_technology)))
;  type "temp_max_capture_capacity" type temp_max_capture_capacity  type "\n"
  
  
  ; we create an empty list that will store all the possible capacities for the storage (from 0 to temp_max_capture_capacity)
  ; then we add the entry for c=0 --> the cost will be 0 compared to usual, since we do not do anything
  let list_capacity_and_costs []
;  set list_capacity_and_costs lput (list 0 0) list_capacity_and_costs 
  set list_capacity_and_costs lput 0 list_capacity_and_costs 
  
  let list_capacity_and_costs2[]
  set list_capacity_and_costs2 lput 0 list_capacity_and_costs2
    
  ;we create a counter variable to keep track of the current capture capacity being tested (value in t)
  let c 500000
;  type "c "type c type "\n"
    
;  
;  print ""
;  print ""
  
  
  ; loop over all the options that are available (in steps of 0.5 Mt capture capacity)
  while [c <= temp_max_capture_capacity] [
      ; capex = connection costs to pipeline (fixed) + capex for the capture technology dependent on capacity required
      set capex (connection_costs + price_capture_technology_per_ton_co2 * c)
;     type "capex " type capex type "\n"
    
      ; opex = pipeline usage costs + storage usage costs + price electricty needed to operate capture technology
      set opex (opex_pipeline * c + opex_storage_costs * c +  electricity_price * electricty_needed_per_t_co2 * c)
;     type "opex " type  opex  type "\n" 
    
      set subsidy (total_subsidy_companies_per_ton_co2 * c)
;     type "subsidy " type subsidy type "\n"
      
      ; for now we assume companies have no expectation, but instead we will use the current co2 price over all the years
      set yearly_saved_fines (current_CO2_fine * c)
;     type "yearly_saved_fines "type yearly_saved_fines type "\n" 
    
      set profit (- capex + subsidy + payback_period * (yearly_saved_fines - opex))
;     type "profit "type profit type "\n" 
    
      set list_capacity_and_costs lput c  list_capacity_and_costs
      set list_capacity_and_costs2 lput profit list_capacity_and_costs2
    
;      set list_capacity_and_costs lput (list c profit) list_capacity_and_costs
;     print list_capacity_and_costs
    
    
;    print ""
;    print ""
    
      set c (c + 500000)    ;increase counter by 1 Mt
  ]
  
  print list_capacity_and_costs  
  print list_capacity_and_costs2
  

  ; we need to take the highest profit. we take the c (capacity) for which that highest profit is reached
  ; after that we can build a capture techology with that optimal capacity
  let index (position (max list_capacity_and_costs2) list_capacity_and_costs2)
  set optimal_capacity (item index list_capacity_and_costs)
  type "capcity with highest profit: " type optimal_capacity / 1000000  type " Mt \n"
  
  
end








;; this value stays constant for the company, so we only need to calculate it once
;to-report calculate_total_co2_produced_by_this_company
;  ; calculate the amount of co2 in tons this company creates this year
;  set tons_co2_produced_this_company (oil_needed * co2_per_ton_oil)
;;  show tons_co2_produced_this_company
;  report tons_co2_produced_this_company
;end
;
;to-report calculate_total_co2_emitted_by_this_company
;  set tons_co2_emitted_this_company (tons_co2_produced_this_company - tons_co2_stored_this_company)
;;  show tons_co2_emitted_this_company
;  report tons_co2_emitted_this_company
;end 
;
;; for now no storage --> NEEDS TO BE CHANGED LATER
;to-report calculate_total_co2_stored_by_this_company
;  set tons_co2_stored_this_company 0
;  report tons_co2_stored_this_company
;end
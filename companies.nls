companies-own [
  payback_period
  
  yearly_fixed_costs
  
  oil_needed
  
  tons_co2_produced_this_company
  tons_co2_stored_this_company
  tons_co2_emitted_this_company
  
  optimal_capacity
]


 
 
 

to do_company_actions
  
  
  ; WE CHECK IF WE WANT TO BUILD A CAPTURE TECHNOLOGY IF THERE IS CAPACITY LEFT ANY OF THE PIPELINES THAT ARE AVAILABLE 
  ; WE CAN JOIN EITHER A NOT FULL EXTENDABLE PIPELINE OR A FIXED ONE IF IT IS NOT YET BUILT
  ifelse (any? storages with [open_to_join?]) [

    
    let subsidy_companies ([total_subsidy_companies_per_ton_co2] of one-of governments)
    
    ; function calculates the optimal capacity and optimal location to join    
    let opt_who (decide_how_much_capacity_capture_to_build (subsidy_companies) ) 
     
    
    ; STUFF TO DO IF WE DECIDE TO BUILD A NEW CAPTURE TECHNOLOGY AND JOIN A PIPELINE
    ; we dont need to do anything if we dont decide to build something
    if (optimal_capacity > 0) [
      
      
      
      ; increase the cost for the industry to store co2 by the initial building costs (capex)
      set total_system_industry_cost_to_store_co2 (total_system_industry_cost_to_store_co2
        + connection_costs + price_capture_technology_per_ton_co2 * optimal_capacity      ; capex
        - subsidy_companies * optimal_capacity                         ; subsidy
      )
      
      ; increase the amount subsidies that the government has paid to companies
      set total_system_subsidy_to_companies (total_system_subsidy_to_companies + subsidy_companies * optimal_capacity)
      
      
      
      
      
      ; create a link from this company to the storage location
      create-pipeline-to storage opt_who
       
      ; this only applies if a company is joining a storage location that is already built (can only happen for extensible pipelines)
      ; if the storage location is already in use (meaning it is built), the company can start storing CO2 immediately, 
      ; else it needs to wait for the port to build the pipeline
      if ([built?] of storage opt_who) [
        ask storage opt_who [
          ask my-in-links [set color green]  ;pipeline is usable immediately
        ]
        
        ; change the amount of CO2 emitted and stored of this company
        set tons_co2_emitted_this_company (tons_co2_emitted_this_company - optimal_capacity)
        set tons_co2_stored_this_company (tons_co2_stored_this_company + optimal_capacity)
      ]
 
      
      
      
      
      ; decrease the amount of available pipeline capacity
      ; and then check if the pipeline is completely full
      ask storage opt_who [
        set pipeline_capacity_left_to_fill (pipeline_capacity_left_to_fill - [optimal_capacity] of myself)
        
        ; check if the desired capacity is reached
        if (pipeline_full_enough?) [
          set full_enough? true
          set color lime              ; green means the pipeline can still be joined
        ]
        
        if (pipeline_capacity_left_to_fill <= 0) [
          set full_enough? true
          set completely_full? true
          set open_to_join? false
          set color red               ; red means nobody can join the pipeline anymore
                                      ;        print "PIPELINE IS COMPLETELY FULL"
        ]
        
        
      ]
      
      
    ]
    
  ]
  
  ; if we cannot join any pipelines we do not built anything, so the optimal capacity is 0
  [
     set optimal_capacity 0
  ]
  
  
end


to-report calculate_CO2_storage_costs_this_year
  report (yearly_fixed_costs       ; fixed costs to operate the capture technology and pipeline costs 
    + electricity_price * electricty_needed_per_t_co2 * tons_co2_stored_this_company   ;price electricty needed to operate capture technologies
  )
end



;need to implement some intelligence/decision alg, for now random decision
; needs to be decided based on capex, opex with or without capture, internal ROI
to-report decide_how_much_capacity_capture_to_build [subsidy_per_unit]
  
  set optimal_capacity 0
  
  let step_size 10000
  
  ; list in which for every pipeline that is available the storage number, the profit and the optimal capacity will be stored
  let list_optimal_capacities [] 
  let list_optimal_capacities2 [] 
  
  
  ;we loop over all the storages that can be joined
  ask storages with [open_to_join?] [
    
    
    let capex 0
    let opex 0
    let subsidy 0
    let yearly_saved_fines 0
    let profit 0
    let temp_optimal_capacity 0
    let index 0
    
    
    
    
    
    let opex_pipeline 0
    ; check if it is fixed or not and then set the correct opex for the pipeline
    ifelse fixed? [
      set opex_pipeline (opex_pipeline_fixed)][
      set opex_pipeline (opex_pipeline_extensible)
    ]
    
;    type "opex pipeline" type opex_pipeline type "\n"
    
    ; we need to calculate the maximum capture capacity that this company could consider this time
    ; this is limited either by the maximum storage capacity available that this company could build,
    ; the capacity left to fill in the pipeline or the tons of co2 that this company still emits
    ; we pick the highest capacity here (numbers to be compared are in t) --> convert to Mt
    let temp_max_capture_capacity ((min(list pipeline_capacity_left_to_fill   [tons_co2_emitted_this_company] of myself   max_capacity_capture_technology)))
    ;  type "temp_max_capture_capacity" type temp_max_capture_capacity  type "\n"
    
    
    
    
    
    ; we create an empty list that will store all the possible capacities for the storage (from 0 to temp_max_capture_capacity)
    ; then we add the entry for c=0 --> the cost will be 0 compared to usual, since we do not do anything
    let list_capacity_and_costs []
    ;  set list_capacity_and_costs lput (list 0 0) list_capacity_and_costs 
    set list_capacity_and_costs lput 0 list_capacity_and_costs 
    
    let list_capacity_and_costs2[]
    set list_capacity_and_costs2 lput 0 list_capacity_and_costs2
    
    ;we create a counter variable to keep track of the current capture capacity being tested (value in t)
    let c step_size
    ;  type "c "type c type "\n"
    
    ;  
    ;  print ""
    ;  print ""
    
    
    ; loop over all the options that are available (in steps of  [step size]t capture capacity)
    while [c <= temp_max_capture_capacity] [
      ; capex = connection costs to pipeline (fixed) + capex for the capture technology dependent on capacity required
      set capex (connection_costs + price_capture_technology_per_ton_co2 * c)
      ;     type "capex " type capex type "\n"
      
      ; opex = pipeline usage costs + storage usage costs + price electricty needed to operate capture technology
      set opex (opex_pipeline * c + cost_for_companies_per_t_co2 * c +  electricity_price * electricty_needed_per_t_co2 * c)
      ;     type "opex " type  opex  type "\n" 
      
      set subsidy (subsidy_per_unit * c)
      ;     type "subsidy " type subsidy type "\n"
      
      ; for now we assume companies have no expectation, but instead we will use the current co2 price over all the years
      ;      set yearly_saved_fines (current_CO2_fine * c)
      
      ;      type "history_co2_fine: " type history_co2_fine type "\n"
      ;      type "range ticks" type range (ticks + 1) type "\n" 
      
      ; calculates the predicted co2 prices for all the years in the payback period and multiplies it with the tested capacity
      ; then we sum them together to calculate how much co2 fines we save in total
      set yearly_saved_fines (sum ( map [p -> least-squares (range (ticks + 1)) history_co2_fine (ticks + p + 1)  * c] (range [payback_period] of myself)    ))
      
      
      ;     type "yearly_saved_fines "type yearly_saved_fines type "\n" 
      
      set profit (- capex + subsidy + yearly_saved_fines + [payback_period] of myself * ( - opex))
      ;     type "profit "type profit type "\n" 
      
      set list_capacity_and_costs lput c  list_capacity_and_costs
      set list_capacity_and_costs2 lput profit list_capacity_and_costs2
      
      ;      set list_capacity_and_costs lput (list c profit) list_capacity_and_costs
      ;     print list_capacity_and_costs
      
      
      ;    print ""
      ;    print ""
      
      set c (c + step_size)    ;increase counter by 1 Mt
    ]
    
;      print list_capacity_and_costs  
;      print list_capacity_and_costs2
    
    
    ; we need to take the highest profit. we take the c (capacity) for which that highest profit is reached
    ; after that we can choose a capture techology with that optimal capacity
    set index (position (max list_capacity_and_costs2) list_capacity_and_costs2)
    set temp_optimal_capacity (item index list_capacity_and_costs)
    ;    type "capcity with highest profit: " type temp_optimal_capacity / 1000000  type " Mt \n"
    
    ;add the new temp capcity to the list (saves location who, profit, temp optimal capacity)
    set list_optimal_capacities lput max list_capacity_and_costs2 list_optimal_capacities  ;saves profit
    set list_optimal_capacities2 lput (list who temp_optimal_capacity) list_optimal_capacities2  ;saves who and capacity
  ]
  
;    type "list_optimal_capacities: profits: " type list_optimal_capacities type "\n"
;    type "list_optimal_capacities2: whos and capacities: " type list_optimal_capacities2 type "\n"
  
  ;after we looped over all the possible pipelines to join, we pick the one with the highest profit for the company
  let max_index (position (max list_optimal_capacities) list_optimal_capacities)  ; index with highest profit
  set optimal_capacity (item 1  item max_index   list_optimal_capacities2  )
  let optimal_who (item 0 item max_index  list_optimal_capacities2 )
  
  ;  type "optimal_capacity: " type optimal_capacity type "\n"
  ;  type "optimal_who: " type optimal_who type "\n"
  
  let opex_pipeline_optimal 0
  ifelse [fixed?] of storage optimal_who [
    set opex_pipeline_optimal (opex_pipeline_fixed)][
    set opex_pipeline_optimal (opex_pipeline_extensible)
  ]
  
  ; yearly running fixed costs = cost of the new pipeline + costs of the old pipelines (excluding capex)
  set yearly_fixed_costs (yearly_fixed_costs 
    + opex_pipeline_optimal * optimal_capacity           ; pipeline usage costs
    + [cost_for_companies_per_t_co2] of storage optimal_who * optimal_capacity      ; storage usage costs
  )
  
  report (optimal_who)
  
end









companies-own [
  payback_period
  
  
  total_yearly_price_CO2_storage
  total_yearly_price_CO2_emitted
  
  total_yearly_price_electricity
  total_yearly_CO2_fine
  
  
  oil_needed
  electricity_needed
  
  tons_co2_produced_this_company
  tons_co2_stored_this_company
  tons_co2_emitted_this_company
  
  
  
  
]






to do_company_actions
  
  ; calculate the amount of co2 in tons this company creates this year
;  set tons_co2_produced_this_company (oil_needed * co2_per_ton_oil)
 
  decide_whether_to_join_pipeline
  
;  ifelse join_pipeline? [
;    ; do stuff when the company decides to join (we have to create a link with the storage location)
;    ; only join when we it economcally makes sense
;    ; add costs to industry costs for joining ccs
;    ; add amount of used subsidy to the total subsidy used by companies
;  ]
;  [
;    ; do stuff when the company does not join
;    ; increase tons_co2_stored_this_company by the amount that the new technology can store
;  ]
;  
  
  
end



;need to implement some intelligence/decision alg, for now random decision
; needs to be decided based on capex, opex with or without capture, internal ROI
to decide_whether_to_join_pipeline
  
  let available_capacity ([pipeline_capacity_left_to_fill] of one-of ports)
  
  ; we need to calculate the maximum capture capacity that this company could consider this time
  ; this is limited either by the maximum storage capacity available that this company could build,
  ; the capacity left to fill in the pipeline or the tons of co2 that this company still emits
  ; we pick the highest capacity here (numbers to be compared are in t) --> convert to Mt
  let temp_max_capture_capacity ((min(list available_capacity   tons_co2_emitted_this_company   max_capacity_capture_technology)) / 1000000)
  
  let opex_pipeline 0
  
  ; what happens if its a fixed pipeline
  ifelse [fixed?] of one-of ports 
  [set opex_pipeline (opex_pipeline_fixed)]
  [set opex_pipeline (opex_pipeline_fixed)]
  
  
  
  ; how to decide if its an extensible pipeline
    ; we create an empty list that will store all the possible capacities for the storage (from 0 to temp_max_capture_capacity)
    let list_capacity_and_costs []
    
    ;we create a counter variable to keep track of the current capture capacity being tested (value in t)
    let c 0
    
    ; loop over all the options that are available (in steps of 1 Mt capture capacity)
    while [c <= temp_max_capture_capacity] [
      ; capex = connection costs to pipeline (fixed) + capex for the capture technology dependent on capacity required
      let capex (connection_costs + price_capture_technology_per_ton_co2 * c)
    type "capex " type capex type "\n"
    
      ; opex = pipeline usage costs + storage usage costs + price electricty needed to operate capture technology
      let opex (1)
      
      
      
      set c (c + 1000000)    ;increase counter by 1 Mt
    ]
    

end


; should return true if we want to build one this year, false if not
; for now: random
to-report build_capture_technology?
  let x random 100
  ifelse x > 50 
    [report true]
    [report false]
end

to-report calculate_total_co2_produced_by_this_company
  ; calculate the amount of co2 in tons this company creates this year
  set tons_co2_produced_this_company (oil_needed * co2_per_ton_oil)
;  show tons_co2_produced_this_company
  report tons_co2_produced_this_company
end

to-report calculate_total_co2_emitted_by_this_company
  set tons_co2_emitted_this_company (tons_co2_produced_this_company - tons_co2_stored_this_company)
;  show tons_co2_emitted_this_company
  report tons_co2_emitted_this_company
end 

; for now no storage --> NEEDS TO BE CHANGED LATER
to-report calculate_total_co2_stored_by_this_company
  set tons_co2_stored_this_company 0
  report tons_co2_stored_this_company
end